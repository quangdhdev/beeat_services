generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id          String             @id @default(uuid())
  email       String             @unique
  fullName    String
  phone       String?
  bio         String?
  avatar      String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  lastLoginAt DateTime?
  cartItems   CartItem[]
  enrollments CourseEnrollment[]
  progress    LessonProgress[]
  payments    Payment[]
  analytics   UserAnalytics?
  preferences UserPreferences?

  @@map("users")
}

model UserPreferences {
  id                        String  @id @default(uuid())
  userId                    String  @unique
  language                  String  @default("en")
  timezone                  String  @default("UTC")
  emailNotifications        Boolean @default(true)
  courseUpdateNotifications Boolean @default(true)
  promotionNotifications    Boolean @default(false)
  weeklyDigestNotifications Boolean @default(true)
  user                      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Instructor {
  id            String   @id @default(uuid())
  name          String
  bio           String
  avatar        String
  rating        Float    @default(0)
  studentsCount Int      @default(0)
  createdAt     DateTime @default(now())
  courses       Course[]

  @@map("instructors")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  courses   Course[]

  @@map("categories")
}

model Course {
  id              String              @id @default(uuid())
  title           String
  description     String
  longDescription String
  thumbnail       String
  price           Float
  originalPrice   Float?
  rating          Float               @default(0)
  studentsCount   Int                 @default(0)
  duration        String
  level           CourseLevel
  language        String              @default("English")
  lastUpdated     DateTime            @default(now())
  totalLessons    Int                 @default(0)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  instructorId    String
  categoryId      String
  cartItems       CartItem[]
  analytics       CourseAnalytics[]
  enrollments     CourseEnrollment[]
  requirements    CourseRequirement[]
  sections        CourseSection[]
  skills          CourseSkill[]
  category        Category            @relation(fields: [categoryId], references: [id])
  instructor      Instructor          @relation(fields: [instructorId], references: [id])

  @@map("courses")
}

model CourseSection {
  id       String   @id @default(uuid())
  title    String
  order    Int
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]

  @@map("course_sections")
}

model Lesson {
  id        String           @id @default(uuid())
  title     String
  duration  String
  isPreview Boolean          @default(false)
  videoUrl  String?
  order     Int
  sectionId String
  progress  LessonProgress[]
  resources LessonResource[]
  section   CourseSection    @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@map("lessons")
}

model LessonResource {
  id       String       @id @default(uuid())
  title    String
  url      String
  type     ResourceType
  lessonId String
  lesson   Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("lesson_resources")
}

model CourseSkill {
  id       String @id @default(uuid())
  skill    String
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("course_skills")
}

model CourseRequirement {
  id          String @id @default(uuid())
  requirement String
  courseId    String
  course      Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("course_requirements")
}

model CourseEnrollment {
  id                String    @id @default(uuid())
  userId            String
  courseId          String
  enrolledAt        DateTime  @default(now())
  completedAt       DateTime?
  certificateEarned Boolean   @default(false)
  certificateUrl    String?
  course            Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("course_enrollments")
}

model LessonProgress {
  id              String    @id @default(uuid())
  userId          String
  lessonId        String
  completed       Boolean   @default(false)
  completedAt     DateTime?
  timeSpent       Int       @default(0)
  watchedDuration Int       @default(0)
  lastAccessedAt  DateTime  @default(now())
  lesson          Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

model CartItem {
  id       String   @id @default(uuid())
  userId   String
  courseId String
  quantity Int      @default(1)
  addedAt  DateTime @default(now())
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("cart_items")
}

model Payment {
  id                    String             @id @default(uuid())
  userId                String
  amount                Float
  currency              String             @default("VND")
  status                PaymentStatus
  paymentMethod         String
  stripePaymentIntentId String?
  createdAt             DateTime           @default(now())
  paidAt                DateTime?
  billingAddress        BillingAddress?
  orderItems            PaymentOrderItem[]
  user                  User               @relation(fields: [userId], references: [id])

  @@map("payments")
}

model BillingAddress {
  id        String  @id @default(uuid())
  paymentId String  @unique
  fullName  String
  email     String
  address   String
  city      String
  zipCode   String
  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@map("billing_addresses")
}

model PaymentOrderItem {
  id        String  @id @default(uuid())
  paymentId String
  courseId  String
  price     Float
  quantity  Int     @default(1)
  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@map("payment_order_items")
}

model CourseAnalytics {
  id        String   @id @default(uuid())
  courseId  String
  userId    String?
  viewedAt  DateTime @default(now())
  source    String?
  referrer  String?
  ipAddress String?
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("course_analytics")
}

model UserAnalytics {
  id                 String   @id @default(uuid())
  userId             String   @unique
  totalTimeSpent     Int      @default(0)
  coursesCompleted   Int      @default(0)
  lessonsCompleted   Int      @default(0)
  certificatesEarned Int      @default(0)
  currentStreak      Int      @default(0)
  longestStreak      Int      @default(0)
  dailyGoalMinutes   Int      @default(30)
  weeklyGoalMinutes  Int      @default(210)
  lastUpdated        DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_analytics")
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ResourceType {
  PDF
  VIDEO
  LINK
  DOCUMENT
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
}
